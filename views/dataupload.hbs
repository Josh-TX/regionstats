{{#section 'styles'}}
{{/section}}
	{{>navigation_bar}}
	<div class="container-fluid" ng-controller="uploadRegion" ng-submit="form.submit()">
		<h1>Upload Data</h1>
			<div class="row top-buffer form-group" ng-class="{'has-error': form.error.parent}">
				<div class="col-sm-3">
					<button type="button" class="btn btn-primary btn-block" ng-click="regionModal.show=true">Select Region Group</button>
				</div>
				<div class="col-sm-9">
					<input type="text" class="form-control" ng-model="regionModal.name" disabled></input>
					<span class="help-block pull-right" ng-bind="form.error.parent"></span>
				</div>
			</div>
			<div class="row top-buffer form-group" ng-class="{'has-error': form.error.type}">
				<div class="col-sm-3">
					<button type="button" class="btn btn-primary btn-block" ng-click="typeModal.show=true">Select Source</button>
				</div>
				<div class="col-sm-9">
					<input type="text" class="form-control" ng-model="typeModal.name" disabled></input>
					<span class="help-block pull-right" ng-bind="form.error.type"></span>
				</div>
			</div>
			<div class="row top-buffer form-group" ng-class="{'has-error': form.error.data}">
				<div class="col-sm-3">
					<label class="btn btn-primary btn-block">
						Select File 
						<input type="file" class="hidden" file-reader callback="stats.setData(data)" file-name="fileName">
					</label>
				</div>
				<div class="col-sm-9">
					<input type="text" class="form-control" ng-model="fileName" disabled></input>
					<span class="help-block pull-right" ng-bind="form.error.data"></span>
				</div>
				
			</div>
			<div ng-if="stats.data">
				inside if
				<table class="table table-bordered">
					<tr>
						<th>Spreadsheet Title</th>
						<td ng-repeat="header in stats.headers track by $index">{{ng "header"}}</td>
					</tr>
					<tr>
						<th>
							Category
							<div class="checkbox">
								<label>
									<input type="checkbox" ng-model="cats.sync">
									Synchronize
								</label>
							</div>
						</th>
						<td ng-repeat="header in stats.headers track by $index">
							<div dropdown="typeModal.name">
								<button class="btn btn-default">test1</button>
								<button class="btn btn-default">test2</button>
							</div>
						</td>
					</tr>
					<tr>
						<th>Actual Title</th>
						<td ng-repeat="header in stats.headers track by $index">
							<div style="position: relative">
								<textarea class="form-control" rows="3" ng-model="stats.titles[$index]" 
									ng-focus="focus=true;stats.titleChanged($index)" ng-blur="focus=false"
									ng-change="stats.titleChanged($index)"></textarea>
								<div style="position: absolute" ng-if="focus">
									<div ng-repeat="sugg in stats.suggestions">
										<button class="btn btn-success" ng-bind="sugg.name"></button>
									</div>
								</div>
							</div>
						</td>
					</tr>
					<tr>
						<th>Year</th>
						<td ng-repeat="unused in stats.headers track by $index">
							<input type="text"></input>
						</td>
					</tr>
					<tr ng-repeat="obj in stats.data">
						<th>{{ng "obj.name"}}</th>
						<td ng-repeat="value in obj.values track by $index">{{ng "value"}}</th>
					</tr>
				</table>
				<input class="btn btn-primary btn-lg pull-right" type="submit" value="submit"></input>
			</div>
		</div>
		<!-- modal -->
		<div modal="regionModal.show" str="regionModal.title" callback="regionModal.submitRegion()">
			<div class="row">
				<div class="col-xs-6">
					<button class="btn btn-default pull-left right-buffer" ng-click="regionModal.back()" ng-if="regionModal.isNotWorld()">back</button>
					<h2 class="top-no-buffer"><small ng-bind="regionModal.currentRegion.name"></small></h2>
				</div>
				<div class="col-xs-6">
					<input type="text" class="form-control" placeholder="filter" ng-model="regionModal.filter" ng-change="regionModal.filterChanged()"></input>
				</div>
			</div>
			<hr>
			<button class="btn btn-default" ng-repeat="data in regionModal.regions" ng-click="regionModal.select(data.id)">{{ng "data.name"}}</button>
			<p ng-if="regionModal.isEmpty()">No sub-regions found</p>
			<p ng-if="regionModal.loading">Loading...</p>
		</div>

		<div modal="typeModal.show" str="typeModal.title">
			<button class="btn btn-default" ng-repeat="(id, name) in typeModal.types" ng-click="typeModal.select(id)">{{ng "name"}}</button>
		</div>
	</div><!-- end container -->
	
{{#section 'scripts'}}

<script type="application/javascript">
    var app = angular.module("myApp", []);
	
	
	app.service("formService", function($http){
		var self = this;
		this.data = [];
		
		this.submit = function(){
			self.data.map(titleCase);
			self.error = uploadRegionValidate(self);
			if (self.error.none)
				
				$http.post('/region/upload', this).then(successCallback, errorCallback);
		}
		this.setData = function(){
			//idk
		}
		
		function successCallback(response){
			if (response.data.redirect){
				window.location.href = response.data.redirect;
			}
			else if (response.data.message){
				alert(response.data.message)
			}
			else {
				alert("unknown response");
			}
		}		
		function errorCallback(response){
			alert("an error occured: " + JSON.stringify(response.data))
		}
		
	});
	app.service("event", function(){
		var self = this;
		var events = {};
		this.on = function (eventName, func) {
			events[eventName] = events[eventName] || [];
			events[eventName].push(func);
		}
		this.off = function(eventName, func) {
			if (events[eventName]) {
				for (var i = 0; i < events[eventName].length; i++) {
					if (events[eventName][i] === func) {
						events[eventName].splice(i, 1);
						break;
					}
				}
			}
		}
		this.emit = function (eventName, data) {
			if (events[eventName]) {
				events[eventName].forEach(function(func) {
					func(data);
				});
			}
		}
	})
	
	app.service("regionService", function($http, formService){
		var self = this;
		var list = {};
		
		this.filter = "";
		this.currentRegion = {id: 0, name: "World"};
		this.show = false;
		this.title = "Select Parent Region";
		this.name = "not selected";
		this.regions = [];
		this.loading = true;
		getRegion(0);
		
		this.back = function() {
			var id = self.currentRegion.id;;
			getRegion(list[id].parent);
		}
		this.select = function(id){
			getRegion(id);
		}
		this.submitRegion = function() {
			formService.parent = self.currentRegion.id;
			self.name = self.currentRegion.name;
		}		
		this.isEmpty = function(){
			return list[self.currentRegion.id] && list[self.currentRegion.id].r.length == 0;
		}
		this.isNotWorld = function(){
			return self.currentRegion.id != 0;
		}
		this.filterChanged = function(){
			if (list[self.currentRegion.id]){
				self.regions = list[self.currentRegion.id].r.filter(passesFilter);
			}
		}
		//meant to be called by other services
		this.getRegionCallback = function(targetid, callback){
			if (!list[targetid]){
				$http.post('/ajax/region', {id: targetid}).then(function(response){
					list[targetid] = response.data;
					callback(response.data);
				}, errorRegionCallback);
			}
			else {
				callback(list[targetid]);
			}		
		}
		
		function getRegion(targetid)
		{
			var oldid = self.currentRegion.id
			self.currentRegion.id = targetid;
			self.filter = "";
			if (!list[targetid]){	
				$http.post('/ajax/region', {id: self.currentRegion.id}).then(successRegionCallback, errorRegionCallback);
				if (list[oldid]){
					self.currentRegion.name = list[oldid].r.find( function(obj){return obj.id == targetid} ).name;
				}
				self.loading = true;
				self.regions = [];
			}
			else {
				self.currentRegion.name = list[targetid].name;
				self.regions = list[targetid].r;
			}
		}
		function successRegionCallback(response)
		{
			console.log(response.data);
			var id = self.currentRegion.id;
			list[id] = response.data;
			self.currentRegion.name = list[id].name;
			self.regions = list[id].r;
			self.loading = false;
		}
		function errorRegionCallback(response)
		{
			console.log(response);
		}
		function passesFilter(obj){
			var filters = self.filter.toLowerCase().split(/[ ,_\-]+/);
			var tokens = obj.name.toLowerCase().split(/[ ,\-]+/);
			for (var i = 0; i < filters.length; i++) {
				var match = false;
				for (var j = 0; j < tokens.length; j++) {
					if (tokens[j].startsWith(filters[i])) {
						match = true;
						break;
					}
				}
				if (match == false) {
					return false;
				}
			}
			return true;
		}

		return self;
	
	})
	
	app.service("statService", function($http, regionService, event){
		var self = this;
		this.setData = function(response){
			var data = Papa.parse(response).data;
			if (data.length < 2){
				return;
			}
			data[0].shift();
			self.headers = data[0];
			self.width = self.headers.length
			event.emit("width", self.width);
			self.titles = [];
			for (var i = 0; i < self.width; i++){
				self.titles.push("");
			}
			data.shift();
			regionService.getRegionCallback(192, regionCallback.bind(null, data));//hardcoded atm
		}
		function regionCallback(data, regionObj){
			self.data = data.map(arrayToObject.bind(null, regionObj.r));
			console.log("self.data = " + JSON.stringify(self.data));
		}
		function arrayToObject(regionList, arr){
			var obj = {};
			var region = regionList.find(function(region){
				if (region.name.toLowerCase() == arr[0].toLowerCase()){
					return region;
				}
			})
			if (region){
				obj.id = region.id;
				obj.name = region.name;
				arr.shift();
				obj.values = arr;
			}
			else {
				obj.error = "Error finding region " + arr[0];
			}
			return obj;
		}
		
		
		self.titleChanged = function(index){
			var title = self.titles[index];
			if (title.length < 2){
			console.log("returning")
				self.suggestions = [];
				return;
			}
			console.log("not returning")
			for (var i = 0; i < titleList.length; i++){
				if (titleList[i].name.filter(title)){
					console.log("pushed")
					self.suggestions.push(titleList[i]);
				}
			}		
		}
		self.suggestions = [];
		var titleList = [
			{id: "1", name: "population"},
			{id: "2", name: "Murders"},
			{id: "3", name: "Murders per Capita"}
		]
	});
	String.prototype.filter = function(str){
		var filters = str.toLowerCase().split(/[ ,_\-]+/);
		var tokens = this.toLowerCase().split(/[ ,\-]+/);
		for (var i = 0; i < filters.length; i++) {
			var match = false;
			for (var j = 0; j < tokens.length; j++) {
				if (tokens[j].startsWith(filters[i])) {
					match = true;
					break;
				}
			}
			if (match == false) {
				return false;
			}
		}
		return true;
	}
	app.service("catService", function(event){
		event.on("width", function(arg){
			alert(arg);
		}                                                                                                          )
		this.select = function(name){
			
		}
		this.list = [
			{id: 0, name: "Census"},
			{id: 1, name: "Crime"},
			{id: 2, name: "Economics"},
			{id: 3, name: "Education"},
			{id: 4, name: "Voting"}
		]
	})
	
	
	app.controller("uploadRegion", function($scope, formService, regionService, statService, catService){
		$scope.cats = catService;
		$scope.typeModal = {}
		$scope.typeModal.types = {
			"1": "Country",
			"2": "City",
			"3": "State",
			"4": "Territory",
			"5": "Province"
		}
		$scope.typeModal.show = false;
		$scope.typeModal.title = "Select Region Type";
		$scope.typeModal.name = "not selected";
		$scope.typeModal.select = function(id){
			$scope.typeModal.name = this.types[id];
			$scope.form.type = id;
			$scope.typeModal.show = false;
		}
		$scope.stats = statService;
		$scope.form = formService;
		$scope.regionModal = regionService;
	});
</script>
<script src="/content/js/filereader.js"></script>
<script src="/content/js/modal.js"></script>
<script src="/content/js/dropdown.js"></script>
<script src="/content/js/titlecase.js"></script>
<script src="/content/validators/regionupload.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/4.1.2/papaparse.js"></script>

{{/section}}