{{#section 'styles'}}
textarea{
	min-width: 15em;
	resize: none;
}
{{/section}}
	{{>navigation_bar}}
<div class="container-fluid" ng-controller="uploadRegion">
	<h1 ng-if="!subid">Upload Data</h1>
	<h1 ng-if="subid">Edit Data</h1>
	<div ng-if="!subid" class="row top-buffer form-group" ng-class="{'has-error': form.error.parent}">
		<div class="col-sm-3">
			<button type="button" class="btn btn-primary btn-block" ng-click="regionModal.show=true">Select Region Group</button>
		</div>
		<div class="col-sm-9">
			<input type="text" class="form-control" ng-model="regionModal.name" disabled></input>
			<span class="help-block pull-right" ng-bind="form.error.parent"></span>
		</div>
	</div>
	<div class="row top-buffer form-group" ng-class="{'has-error': form.error.type}">
		<div class="col-sm-3">
			<button type="button" class="btn btn-primary btn-block" ng-click="typeModal.show=true">Select Source</button>
		</div>
		<div class="col-sm-9">
			<input type="text" class="form-control" ng-model="typeModal.name" disabled></input>
			<span class="help-block pull-right" ng-bind="form.error.type"></span>
		</div>
	</div>
	<div ng-if="!subid" class="row top-buffer form-group" ng-class="{'has-error': form.error.data}">
		<div class="col-sm-3">
			<label class="btn btn-primary btn-block">
				Select File 
				<input type="file" class="hidden" file-reader callback="csv.setFile(data)" file-name="fileName">
			</label>
		</div>
		<div class="col-sm-9">
			<input type="text" class="form-control" ng-model="fileName" disabled></input>
			<span class="help-block pull-right" ng-bind="form.error.data"></span>
		</div>
		
	</div>
	{{ng "form.error"}}
	<div ng-if="csv.data.length > 0">
		<table class="table table-bordered">
			<tr>
				<th>Spreadsheet Title</th>
				<td ng-repeat="header in csv.headers track by $index">{{ng "header"}}</td>
			</tr>
			<tr>
				<th>
					Category
					<div class="checkbox">
						<label>
							<input type="checkbox" ng-model="cat.sync" ng-change="cat.syncChanged()">
							Sync All
						</label>
					</div>
				</th>
				<td ng-repeat="selection in cat.selections track by $index" ng-class="{'form-group': true, 'has-error': form.error.cats[$index]}">
					<div dropdown="selection.name">
						<button class="btn btn-default" ng-repeat="item in cat.cats" ng-click="cat.select($parent.$index, item)">
							{{ng "item.name"}}
						</button>
					</div>
					<span class="help-block" ng-bind="form.error.cats[$index]"></span>
				</td>
			</tr>
			<tr>
				<th>Actual Title</th>
				<td ng-repeat="selection in title.selections track by $index" ng-class="{'has-success': selection.id, 'has-error': form.error.titles[$index]}">
					<div style="position: relative">
						<textarea class="form-control" rows="3" ng-disabled="title.isDisabled($index)" ng-model="selection.name" 
							ng-focus="focus=true;title.changed($index)" ng-blur="focus=false"
							ng-change="title.changed($index)">
						</textarea>
						<div style="position: absolute" ng-if="focus">
							<div ng-repeat="sugg in title.suggestions track by $index">
								<button class="btn btn-success" ng-bind="sugg.name" ng-mousedown="title.select($index, $parent.$index)"></button>
							</div>
						</div>
					</div>
					<span class="help-block" ng-bind="form.error.titles[$index]"></span>
				</td>
			</tr>
			<tr>
				<th>
					Year
					<div class="checkbox">
						<label>
							<input type="checkbox" ng-model="year.sync" ng-change="year.syncChanged()">
							Sync All
						</label>
					</div>
				</th>
				<td ng-repeat="str in year.years track by $index" ng-class="{'has-error': form.error.years[$index]}">
					<input type="number" class="form-control" ng-model="year.years[$index]" ng-change="year.change($index)"></input>
					<span class="help-block" ng-bind="form.error.years[$index]"></span>
				</td>
			</tr>
			<tr>
				<th>Criteria</th>
				<td ng-repeat="selection in criteria.selections track by $index">
					<button ng-if="selection.length < 3" class="btn btn-default" ng-click="criteria.add($index)">
						<span class="glyphicon glyphicon-plus"></span>
						Add Criteria
					</button>
					<div ng-repeat="row in selection track by $index" style="position: relative" ng-class="{'has-success': row.id, 'has-error': form.error.criteria[$parent.$index + ' ' + $index]}">
						<textarea class="form-control" rows="2" ng-model="row.name" style="padding-right: 2em"
							ng-focus="focus=true;criteria.changed($parent.$index, $index)" ng-blur="focus=false"
							ng-change="criteria.changed($parent.$index, $index)">
						</textarea>
						<span class="help-block" ng-bind="form.error.criteria[$parent.$index + ' ' + $index]"></span>
						<div style="position: absolute; z-index: 1000" ng-if="focus">
							<div ng-repeat="sugg in criteria.suggestions track by $index">
								<button class="btn btn-success" ng-bind="sugg.name" ng-mousedown="criteria.select($index, $parent.$parent.$parent.$index, $parent.$index)"></button>
							</div>
						</div>
						<div style="position: absolute; z-index: 990; top: 1px; right: 1px">
							<button class="btn btn-default btn-xs" ng-click="criteria.remove($parent.$index, $index)">
								<span class="glyphicon glyphicon-remove"></span>
							</button>
						</div>
					</div>
				</td>
			</tr>
			
			<tr ng-repeat="obj in csv.data" ng-if="obj.error">
				<th colspan="{{ng 'csv.statCount + 1' }}" class="text-danger">{{ng "obj.error"}}</th>
			</tr>
			<tr ng-repeat="obj in csv.data" ng-if="!obj.error">
				<th>{{ng "obj.name"}}</th>
				<td ng-repeat="value in obj.values track by $index" ng-class="{danger: !csv.isNumber(value)}">
					{{ng "csv.formatNumber(value)"}}
				</td>
			</tr>
		</table>
		<button ng-if="!subid" class="btn btn-primary btn-lg" ng-click="form.submit()">Submit</button>
		{{#if permissions.save}}
		<input class="btn btn-primary btn-lg" type="submit" ng-click="form.submit('save')" value="save changes"></input>
		{{/if}}
		{{#if permissions.approve}}
		<input class="btn btn-primary btn-lg" type="submit" ng-click="form.submit('approve')" value="approve submission"></input>
		{{/if}}
		{{#if permissions.delete}}
		<input class="btn btn-primary btn-lg" type="submit" ng-click="form.submit('delete')" value="delete submission"></input>
		{{/if}}
		{{#if permissions.reject}}
		<input class="btn btn-primary btn-lg" type="submit" ng-click="form.submit('reject')" value="reject submission"></input>
		{{/if}}
	</div>
	<!-- modal -->
	<div modal="regionModal.show" str="'Select Region Group'">
		<div class="row">
			<div class="col-xs-6">
				<button class="btn btn-default pull-left right-buffer" ng-click="regionModal.back()" ng-if="regionModal.isNotWorld()">
					back
				</button>
				<h2 class="top-no-buffer"><small ng-bind="regionModal.getCurrentName()"></small></h2>
			</div>
			<div class="col-xs-6">
				<input type="text" class="form-control" placeholder="filter" ng-model="regionModal.filter" ng-change="regionModal.filterChanged()"></input>
			</div>
		</div>
		<hr>
		<button class="btn btn-primary" ng-repeat="item in regionModal.groups" ng-click="regionModal.submitGroup(item.id)">{{ng "item.type"}}s in {{ng "regionModal.getCurrentName()"}}</button>
		<button class="btn btn-default" ng-repeat="item in regionModal.regions" ng-click="regionModal.select(item.id)">{{ng "item.name"}}</button>
		<p ng-if="regionModal.isEmpty()">No sub-regions found</p>
		<p ng-if="regionModal.loading">Loading...</p>
	</div>

	<div modal="typeModal.show" str="typeModal.title">
		<button class="btn btn-default" ng-repeat="(id, name) in typeModal.types" ng-click="typeModal.select(id)">{{ng "name"}}</button>
	</div>
</div><!-- end container -->
	
{{#section 'scripts'}}

<script type="application/javascript">
	app.service("formService", function($http, event){
		var self = this;
		
		this.data = [];
		this.cats = [];
		this.titles = [];
		this.years = [];
		this.criteria = [];
		
		this.submit = function(action){
			var filteredData = self.data.filter(function(obj){
				return !obj.error
			});
			var mappedData = filteredData.map(function(obj){
				return {
					id: obj.id,
					values: obj.values
				}
			});
			var mappedCats = self.cats.map(function(obj){
				return obj.id;
			})
			var mappedTitles = self.titles.map(function(obj){
				if (obj.id > 0)
					return obj.id
				return obj.name;
			})
			var mappedCriteria = self.criteria.map(function(col){
				return col.map(function(row){
					if (row.id > 0)
						return row.id
					return row.name;
				})
			})
			var obj = {
				statCount: self.statCount,
				cats: mappedCats,
				titles: mappedTitles,
				years: self.years,
				criteria: mappedCriteria,
				data: mappedData
			}
			self.error = dataValidate(obj);
			if (self.error.none){
			console.log(action)
				console.log(JSON.stringify(obj));
				if (action){
					obj.action = action;
					obj.subid = {{subid}};
					$http.post('/data/edit', obj).then(successCallback, errorCallback);
				} else {
					$http.post('/data/upload', obj).then(successCallback, errorCallback);
				}
			}
		}
		event.listen("setStatCount", function(count){
			self.statCount = count;
		});
		event.listen("catSelections", function(selections){
			self.cats = selections;
		})
		event.listen("titleSelections", function(selections){
			self.titles = selections;
		})
		event.listen("yearSelections", function(selections){
			self.years = selections;
		})
		event.listen("criteriaSelections", function(criteria){
			self.criteria = criteria;
		})
		event.listen("csvData", function(data){
			self.data = data;
		})
		function successCallback(response){
			console.log("success")
			console.log(response.data);
			if (response.data.redirect){
				window.location.href = response.data.redirect;
			}
			else if (response.data.message){
				alert(response.data.message)
			}
			else {
				alert("unknown response: " + JSON.stringify(response.data));
			}
		}		
		function errorCallback(response){
			alert("an error occured: " + JSON.stringify(response.data))
		}
		
	});
	
	
	
	app.service("csvService", function($http, event){
		var self = this;
		var fileData;
		var type;
		var parent;
		
		this.headers = [];
		this.data = [];
		
		this.setFile = function(response){
			fileData = Papa.parse(response).data;
			fileData[0].shift();
			self.headers = fileData[0];
			self.statCount = self.headers.length
			event.broadcast("setStatCount", self.statCount);
			fileData.shift();
			fileData = fileData.filter(function(row){
				if (row.length < 2){
					return false;
				}
				return true;
			})
			if (fileData.length < 1){
				alert("no data")
			}
			setData();
		}
		this.formatNumber = function(num){
			if (typeof num == "number"){
				return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
			} else {
				return "-";
			}
		}
		this.isNumber = function(num){
			return (typeof num == "number")
		}
		
		event.listen("groupSubmitted", function(groupid, regionType, regionid){
			type = regionType;
			parent = regionid;
			setData();
		});
		
		event.listen("initialData", function(data){
			self.data = data;
			event.broadcast("csvData", self.data);//for formService
		})
		
		function setData(){
			if (typeof fileData != "undefined" && typeof parent != "undefined"){
				event.requestAsync("getRegion", regionCallback, parent);
			}
		}
		function regionCallback(regionObj){
			self.data = fileData.map(arrayToObject.bind(null, regionObj.r));
			event.broadcast("csvData", self.data);
		}
		
		
		function arrayToObject(regionList, arr){
			var obj = {};
			var region = regionList.find(function(region){
				if (region.name.toLowerCase() == arr[0].toLowerCase()){
					return region;
				}
			})
			if (region){
				obj.id = region.id;
				obj.name = region.name;
				arr.shift(); //remove region name from array, leaving just the values
				for (var i = 0; i < arr.length; i++){
					var num = parseFloat(arr[i].replace(",", ""));
					if (isNaN(num)){
						arr[i] = "";
					}
					else {
						arr[i] = num;
					}
				}
				obj.values = arr;
			}
			else {
				obj.error = 'Error finding region "' + arr[0] + '"';
			}
			return obj;
		}
	});

	app.service("catService", function(event){
		var self = this;
		var statCount = 0;
		this.sync = false;
        this.selections = [];
		this.syncChanged = function(){
			if (!self.sync){
				return;
			}
			//alert(JSON.stringify(self.selections))
			for (var i = 0; i < statCount; i++){
				if (self.selections[i].id > 0){
					self.select(i, self.selections[i]);
					break;
				}
			}
		}
		this.select = function(index, obj){
			if (self.sync){
				for (var i = 0; i < statCount; i++){
					self.selections[i] = obj;
					event.broadcast("setCat", i, obj.id);
				}
			}else {
				self.selections[index] = obj;
				event.broadcast("setCat", index, obj.id);
			}
		}
		this.cats = [
			{id: 1, name: "Census"},
			{id: 2, name: "Crime"},
			{id: 3, name: "Economics"},
			{id: 4, name: "Education"},
			{id: 5, name: "Voting"}
		];
		event.listen("setStatCount", function(count){
			statCount = count;
			self.selections = [];
			for (var i = 0; i < statCount; i++){
				self.selections.push({
					name: "Not Selected",
					id: 0
				});
			}
			event.broadcast("catSelections", self.selections);
		});
		event.listen("initialCats", function(cats){
			for (var i = 0; i < cats.length; i++){
				self.select(i, {
					id: cats[i],
					name: self.cats.find(function(obj){return obj.id == cats[i]}).name
				})
			}
		})
	})
	app.service("titleService", function($http, event){
		var self = this;
		var statCount = 0;
		var titles = {};
		var activeRequests = {};
		this.sync = false;
		this.selections = [];
        this.catIDs = [];
		this.suggestions = [];
		this.select = function(suggIndex, selectionIndex){
			var sugg = self.suggestions[suggIndex]
			var selection = self.selections[selectionIndex]
			selection.name = sugg.name;
			selection.id = sugg.id;
		}
		this.changed = function(index){
			var str = self.selections[index].name;
			self.suggestions = [];
			if (str.length < 2){
				return;
			}
			for (var i = 0; i < statCount; i++){
				if (i == index || self.catIDs[i] != self.catIDs[index] || self.selections[i].id > 0 || self.selections[i].name.equals(str)){
					continue;
				}
				else if (self.selections[i].name.contains(str)){
					self.suggestions.push({
						name: self.selections[i].name,
						id: 0
					});
				}
			}
			var titleList = titles[self.catIDs[index]];
			var success = false;
			for (var i = 0; i < titleList.length; i++){
				if (titleList[i].name.equals(str)){
					self.selections[index].id = titleList[i].id;
					success = true;
				}
				else if (titleList[i].name.contains(str)){
					self.suggestions.push(titleList[i]);
				}
			}
			if (!success){
				self.selections[index].id = 0;
			}
		}
		this.isDisabled = function(index){
			return !self.catIDs[index] || self.catIDs[index] == 0;
		}
		event.listen("setCat", setCat)
		event.listen("setStatCount", function(count){
			statCount = count;
			self.selections = [];
			self.catIDs = [];
			for (var i = 0; i < statCount; i++){
				self.selections.push({
					name: "first select a category",
					id: 0
				});
				self.catIDs.push(0);
			}
			event.broadcast("titleSelections", self.selections);
		});
		event.listen("initialTitles", function(titles){
			var mappedTitles = titles.map(function(str){
				if (/\d+/.test(str)){
					var id = parseFloat(str);
					var name = "loading...";
				} else {
					var id = 0;
					var name = str;
				}
				return {id: id, name: name}
			})
			self.selections = mappedTitles;
			event.broadcast("titleSelections", self.selections);
		});
		function setCat(index, id){
			self.selections[index].name = "";
			self.selections[index].id = 0;
			self.catIDs[index] = id;
			if (!titles[id] && !activeRequests[id]){
				activeRequests[id] = true;
				$http.post("/api/titles", {category_id: id}).then(databaseHandler.bind(null, id), errorCallback);
			}
		}
		function databaseHandler(id, response){
			activeRequests[id] = false;
			titles[id] = response.data;
			for (var i = 0; i < statCount; i++){
				if (self.catIDs[i] == id && self.selections[i].id > 0){
					var title = titles[id].find(function(obj){
						return obj.id == self.selections[i].id
					})
					if (title){
						self.selections[i].name = title.name;
					} else {
						alert("error finding title " + self.selections[i].id);
					}
				}
			}
		}
		function errorCallback(response){
			alert(JSON.stringify(response.data));
		}
	})
	
	app.service("yearService", function(event){
		var self = this;
		var statCount = 0;
		this.sync = false;
        this.years = [];
		this.syncChanged = function(){
			if (!self.sync){
				return;
			}
			for (var i = 0; i < statCount; i++){
				if (self.years[i] > 0){
					self.change(i);
					break;
				}
			}
		}
		this.change = function(index){
			var str = self.years[index];
			if (str.length > 4)
				str = str.substring(0, 4);
			if (self.sync){
				for (var i = 0; i < statCount; i++){
					self.years[i] = str;
				}
			}
		}
		event.listen("setStatCount", function(count){
			statCount = count;
			self.years = [];
			for (var i = 0; i < statCount; i++){
				self.years.push("");
			}
			event.broadcast("yearSelections", self.years);
		});
		event.listen("initialYears", function(years){
			for (var i = 0; i < years.length; i++){
				self.years[i] = years[i];
			}
		})
	})
	app.service("criteriaService", function($http, $timeout, event){
		var self = this;
		var statCount = 0;
		var criteria = [];
		this.selections = [];
		this.suggestions = [];
		this.select = function(suggIndex, col, row){
			var sugg = self.suggestions[suggIndex]
			var selection = self.selections[col][row];
			selection.name = sugg.name;
			selection.id = sugg.id;
		}
		this.add = function(col){
			self.selections[col].push({
				name: "",
				id: 0 
			})
		}
		this.remove = function(col, row){
			self.selections[col].splice(row, 1)
		}
		this.changed = function(col, row){
			var str = self.selections[col][row].name;
			self.suggestions = [];
			if (str.length < 2){
				return;
			}
			//find suggestions from other criteria fields
			for (var i = 0; i < statCount; i++){
				if (i == col){
					continue;
				}
				for (var j = 0; j < self.selections[i].length; j++){
					var selection = self.selections[i][j];
					if (selection.id >= 0 && selection.name.contains(str)){
						if (self.suggestions.find(function(obj){return obj.name == selection.name})){
							continue;
						}
						self.suggestions.push({
							name: self.selections[i][j].name,
							id: 0
						});
					}
				}
			}
			var success = false;
			for (var i = 0; i < criteria.length; i++){
				if (criteria[i].name.equals(str)){
					self.selections[col][row].id = criteria[i].id;
					success = true;
				}
				else if (criteria[i].name.contains(str)){
					self.suggestions.push(criteria[i]);
				}
			}
			if (!success){
				self.selections[col][row].id = 0;
			}		
		}
		event.listen("setStatCount", function(count){
			statCount = count;
			self.selections = [];
			for (var i = 0; i < statCount; i++){
				self.selections.push([]);
			}
			event.broadcast("criteriaSelections", self.selections);
		});
		event.listen("initialCriteria", initialCriteriaFunc);
		
		
		$http.post("/api/criteria", {}).then(databaseHandler, errorCallback)
		var loading = true;
		function databaseHandler(response){
			loading = false;
			criteria = response.data;
		}
		function errorCallback(response){
			alert("error fetching criteria: " + JSON.stringify(response.data));
		}
		function initialCriteriaFunc(initialCriteria){
			if (loading){
				$timeout(initialCriteriaFunc, 100, initialCriteria);
				return;
			}
			self.selections = initialCriteria.map(function(col){
				return col.map(function(row){
					if (/\d+/.test(row)){
						var found = criteria.find(function(obj){return obj.id == row});
						if (!found){
							alert("error finding criteria " + row);
							return {id: 0, name: ""};
						}
						var id = row;
						var name = criteria.find(function(obj){return obj.id == row}).name
					}else {
						var id = 0;
						var name = row;
					}
					return {id: id, name: name};
				});
			})
			event.broadcast("criteriaSelections", self.selections);
		}
	})
	app.service("editService", function($http, event){
		var subid = {{subid}}
		if (subid){
			$http.post("/data/subdata", {subid: subid}).then(subDataHandler, errorCallback)
		}
		function subDataHandler(response){
			var stats = response.data.stats;
			
			stats.sort(function(a, b){
				return a.id - b.id; 
			})
			var cats = [];
			var titles = [];
			var years = [];
			var criteria = [];
			var dataObjects = [];
			var statMap = {};
			var statCount = stats.length;
			for (var i = 0; i < stats.length; i++){
				cats.push(stats[i].category_id);
				titles.push(stats[i].title);
				years.push(stats[i].year)
				criteria.push(JSON.parse(stats[i].criteria))
				statMap[stats[i].id] = i
			}
			var regionData = {};
			var data = response.data.data;
			for (var i = 0; i < data.length; i++){
				if (!regionData[data[i].region_id]){
					regionData[data[i].region_id] = [];
					for (var j = 0; j < statCount; j++){
						regionData[data[i].region_id].push("");
					}
				}
				var col = statMap[data[i].sub_stat_id];
				regionData[data[i].region_id][col] = data[i].val;
			}
			var finalData = [];
			for (var key in regionData) {
				if(!regionData.hasOwnProperty(key)) 
					continue;
				finalData.push({
					id: key,
					name: key,
					values: regionData[key]
				})
			}			
			event.broadcast("setStatCount", statCount);
			event.broadcast("initialCats", cats);
			event.broadcast("initialTitles", titles)
			event.broadcast("initialYears", years)
			event.broadcast("initialCriteria", criteria)
			event.broadcast("initialData", finalData);
			
		}
		function errorCallback(response){
			alert("error fetching submission info: " + JSON.stringify(response.data));
		}
	})
	
	app.controller("uploadRegion", function($scope, formService, regionService, csvService, catService, titleService, yearService, criteriaService, editService){
		$scope.cat = catService;
		$scope.csv = csvService;
		$scope.form = formService;
		$scope.regionModal = regionService;
		$scope.title = titleService;
		$scope.year = yearService;
		$scope.criteria = criteriaService;
		
		$scope.subid = {{subid}}
		
		$scope.refresh = function(){
			alert($scope.csv.data.length)
			$scope.csv.data = $scope.csv.data;
		}
	});
</script>
<script src="/content/services/region.js"></script>
<script src="/content/directives/filereader.js"></script>
<script src="/content/directives/modal.js"></script>
<script src="/content/directives/dropdown.js"></script>
<script src="/content/js/titlecase.js"></script>
<script src="/content/validators/dataupload.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/4.1.2/papaparse.js"></script>

{{/section}}